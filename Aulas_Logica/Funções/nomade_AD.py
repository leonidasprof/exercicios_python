import pandas as pd import requests # Simulação de armazenamento em arquivo Excel usuarios = pd.DataFrame(columns=["usuario", "senha", "preferencias"]) atividades = pd.DataFrame(columns=["codigo", "nome", "localizacao", "dificuldade", "clima"]) rotas = pd.DataFrame(columns=["usuario", "atividades"]) # Função para registrar novo usuário def registrar_usuario(): usuario = input("Digite seu nome de usuário: ") senha = input("Digite sua senha: ") preferencias = input("Digite suas preferências: ") global usuarios usuarios = usuarios.append({"usuario": usuario, "senha": senha, "preferencias": preferencias}, ignore_index=True) print("Usuário registrado com sucesso!") # Função para fazer login def fazer_login(): usuario = input("Digite seu nome de usuário: ") senha = input("Digite sua senha: ") if ((usuarios['usuario'] == usuario) & (usuarios['senha'] == senha)).any(): print("Login realizado com sucesso!") return True else: print("Usuário ou senha incorretos!") return False # Função para exibir o dashboard personalizado def exibir_dashboard(): while True: print("\nDashboard") print("1. Pesquisar Atividades Radicais") print("2. Planejar Roteiro") print("3. Ofertas e Descontos") print("4. Experiências Próximas") print("5. Acessar Perfil e Histórico") print("6. Buscar Hospedagem") escolha = input("Escolha uma opção: ") if escolha == '1': pesquisar_atividades() elif escolha == '2': planejar_roteiro() elif escolha == '3': ofertas_descontos() elif escolha == '4': experiencias_proximas() elif escolha == '5': acessar_perfil() elif escolha == '6': buscar_hospedagem() else: print("Opção inválida!") if input("Deseja sair do Dashboard? (s/n): ").lower() == 's': break # Função para pesquisar atividades radicais com API de clima def pesquisar_atividades(): print("\nPesquisar Atividades Radicais") localizacao = input("Digite a localização: ") dificuldade = input("Digite o nível de dificuldade: ") # Obtendo clima usando API OpenWeather api_key = "SUA_API_KEY_AQUI" clima_url = f"http://api.openweathermap.org/data/2.5/weather?q={localizacao}&appid={api_key}" try: response = requests.get(clima_url) response.raise_for_status() clima_data = response.json() clima = clima_data['weather'][0]['description'] print(f"Clima em {localizacao}: {clima}") except requests.exceptions.RequestException as e: print(f"Erro ao obter o clima: {e}") clima = "desconhecido" # Filtros de pesquisa filtro = (atividades['localizacao'] == localizacao) & (atividades['dificuldade'] == dificuldade) & (atividades['clima'] == clima) resultados = atividades[filtro] if resultados.empty: print("Nenhuma atividade encontrada com esses filtros.") else: print(resultados) if input("Deseja reservar alguma atividade? (s/n): ").lower() == 's': codigo_atividade = input("Digite o código da atividade para reservar: ") print(f"Atividade {codigo_atividade} reservada com sucesso!") # Função para planejar roteiro def planejar_roteiro(): print("\nPlanejar Roteiro") atividades_selecionadas = input("Digite os códigos das atividades selecionadas separados por vírgula: ").split(',') global rotas rotas = rotas.append({"usuario": usuario, "atividades": atividades_selecionadas}, ignore_index=True) print("Roteiro gerado com sucesso!") if input("Deseja compartilhar o roteiro com amigos por e-mail? (s/n): ").lower() == 's': email = input("Digite o e-mail do seu amigo: ") print(f"Roteiro enviado para {email} com sucesso!") # Função para exibir ofertas e descontos def ofertas_descontos(): print("\nOfertas e Descontos") # Exemplo de simulação de ofertas print("1. Desconto de 20% em escalada") print("2. Desconto de 15% em rapel") if input("Deseja ativar alerta de preço? (s/n): ").lower() == 's': print("Alerta de preço ativado!") # Função para exibir experiências próximas def experiencias_proximas(): print("\nExperiências Próximas") print("1. Grupo de escalada") print("2. Grupo de rapel") if input("Deseja participar de algum grupo? (s/n): ").lower() == 's': print("Participação confirmada no grupo!") # Função para acessar perfil e histórico def acessar_perfil(): print("\nPerfil e Histórico") print("1. Avaliar atividade") print("2. Ver ranking de aventura") escolha = input("Escolha uma opção: ") if escolha == '1': print("Avaliação registrada com sucesso!") elif escolha == '2': print("Ranking de aventura exibido!") else: print("Opção inválida!") # Função para buscar hospedagem usando uma API fictícia def buscar_hospedagem(): print("\nBuscar Hospedagem") localizacao = input("Digite a localização: ") # Simulando uma resposta fictícia try: response = requests.get(f"http://ficticia.api/hospedagem?local={localizacao}") response.raise_for_status() hospedagens = response.json() print("Opções de hospedagem:") for hospedagem in hospedagens: print(f"{hospedagem['nome']} - Preço: {hospedagem['preco']}") except requests.exceptions.RequestException as e: print(f"Erro ao buscar hospedagens: {e}") # Função principal def main(): print("Bem-vindo ao Nômade Adventure!") if input("Já tem cadastro? (s/n): ").lower() == 's': if fazer_login(): exibir_dashboard() else:
